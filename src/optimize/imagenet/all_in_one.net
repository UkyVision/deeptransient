name: "models/imagenet"

#MACRO_IN
CROP_SIZE_ = 227

TRAIN_BATCH_ = 50
TEST_BATCH_ = 40

DB_DIR_ = /scratch/mzh234/deeptransient/lmdbs/imagenet/
DB_TEST_DIR_ = /scratch/mzh234/deeptransient/lmdbs/transient/
MEAN_FILE_ = /home/mzh234/software/caffe/models/hybridCNN/hybridCNN_mean.binaryproto 
#MACRO_OUT


#>>> deploy.prototxt
input: "data"
input_dim: 1
input_dim: 3
input_dim: CROP_SIZE_
input_dim: CROP_SIZE_
#<<< deploy.prototxt


#>>> train_test.prototxt
layer {
  name: "data"
  type: "Data"
  top: "data"
  data_param {
    source: "DB_DIR_/train/image_db"
    batch_size: TRAIN_BATCH_
    backend: LMDB
  }
  transform_param {
	crop_size: CROP_SIZE_
    mean_file: "MEAN_FILE_"
  }
  include {phase: TRAIN}
}
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    source: "DB_DIR_/train/label_db"
    batch_size: TRAIN_BATCH_
    backend: LMDB
  }
  include {phase: TRAIN}
}


# Test phase
layer {
  name: "data"
  type: "Data"
  top: "data"
  data_param {
    source: "DB_TEST_DIR_/test_shuffled_im_db"
    batch_size: TEST_BATCH_
    backend: LMDB
  }
  transform_param {
	crop_size: CROP_SIZE_
    mean_file: "MEAN_FILE_"
  }
  include {phase: TEST}
}
layer {
  name: "label"
  type: "Data"
  top: "label"
  data_param {
    source: "DB_TEST_DIR_/test_shuffled_label_db"
    batch_size: TEST_BATCH_
    backend: LMDB
  }
  include {phase: TEST}
}
#<<< train_test.prototxt

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0.001
    decay_mult: 1
  }
  param {
    lr_mult: 0.002
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
    lr_mult: 0.01
    decay_mult: 1
  }
  param {
    lr_mult: 0.02
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "fc6"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 0.1
    decay_mult: 1
  }
  param {
    lr_mult: 0.2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc8-t"
  type: "InnerProduct"
  bottom: "fc7"
  top: "fc8-t"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 40
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

#
# loss
#
#>>> train_test.prototxt
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "fc8-t"
  bottom: "label"
  top: "loss"
}
#<<< train_test.prototxt


###>>> solver.prototxt
net: "train_test.prototxt"
test_iter: 40
test_interval: 200
base_lr: 2e-3
lr_policy: "step"
gamma: 0.8
stepsize: 2000
display: 20
max_iter: 450000
momentum: 0.9
weight_decay: 0.0005
snapshot: 2500
snapshot_prefix: "snapshot"
solver_mode: GPU
###<<< solver.prototxt
